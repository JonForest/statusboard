"use strict"
define("roadmap-page/app",["exports","roadmap-page/resolver","ember-load-initializers","roadmap-page/config/environment"],function(e,t,a,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
const o=Ember.Application.extend({modulePrefix:n.default.modulePrefix,podModulePrefix:n.default.podModulePrefix,Resolver:t.default});(0,a.default)(o,n.default.modulePrefix)
var s=o
e.default=s}),define("roadmap-page/components/feature-list/new-feature-item/component",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Component.extend({isOpen:!1,actions:{toggle(){this.toggleProperty("isOpen")}}})
e.default=t}),define("roadmap-page/components/feature-list/new-feature-item/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"LMCtDcHL",block:'{"symbols":["resource","champion","@feature"],"statements":[[7,"div"],[11,"class","Feature"],[9],[0,"\\n"],[0,"  "],[7,"div"],[11,"class","Feature-Inner"],[9],[0,"\\n    "],[7,"div"],[11,"class","Feature-Head"],[9],[0,"\\n      "],[7,"div"],[11,"class","Feature-Heading column-layout"],[9],[0,"\\n        "],[7,"div"],[11,"class","column-layout__left"],[9],[0,"\\n          "],[7,"h2"],[9],[0,"\\n            "],[7,"button"],[12,"id",[28,[[22,3,["id"]]]]],[12,"aria-controls",[28,[[22,3,["descriptionId"]]]]],[11,"aria-expanded","false"],[3,"action",[[22,0,[]],"toggle"]],[9],[1,[22,3,["name"]],false],[10],[0,"\\n          "],[10],[0,"\\n        "],[10],[0,"\\n      "],[10],[0,"\\n      "],[7,"div"],[11,"class","Feature-HeadContent"],[9],[0,"\\n        "],[7,"div"],[11,"class","Feature-Description column-layout__left flex-3"],[12,"id",[28,[[22,3,["descriptionId"]]]]],[12,"aria-labelledby",[28,[[22,3,["id"]]]]],[9],[0,"\\n          "],[1,[27,"mark-down",null,[["text"],[[22,3,["summary"]]]]],false],[0,"\\n"],[4,"if",[[23,["isOpen"]]],null,{"statements":[[0,"            "],[1,[27,"mark-down",null,[["text"],[[22,3,["description"]]]]],false],[0,"\\n"]],"parameters":[]},{"statements":[[0,"            "],[7,"a"],[11,"href",""],[12,"id",[28,[[22,3,["id"]]]]],[12,"aria-controls",[28,[[22,3,["descriptionId"]]]]],[11,"aria-expanded","false"],[3,"action",[[22,0,[]],"toggle"]],[9],[0,"\\n"],[4,"if",[[23,["isOpen"]]],null,{"statements":[[0,"                Show less\\n"]],"parameters":[]},{"statements":[[0,"                Moreâ€¦\\n"]],"parameters":[]}],[0,"            "],[10],[0,"\\n"]],"parameters":[]}],[0,"        "],[10],[0,"\\n\\n        "],[7,"div"],[11,"class","flex-1"],[9],[0,"\\n          "],[7,"div"],[11,"class","Feature-Detail"],[9],[0,"\\n            "],[7,"div"],[11,"class","Feature-Status"],[9],[0,"\\n              "],[7,"h3"],[9],[0,"Status"],[10],[0,"\\n              "],[7,"div"],[12,"class",[28,["status status--",[22,3,["status"]]]]],[9],[0,"\\n                "],[1,[22,3,["statusText"]],false],[0,"\\n              "],[10],[0,"\\n            "],[10],[0,"\\n\\n"],[4,"if",[[22,3,["availability"]]],null,{"statements":[[0,"              "],[7,"div"],[11,"class","Feature-Availability"],[9],[0,"\\n                "],[7,"h3"],[9],[0,"Availability"],[10],[0,"\\n                "],[7,"p"],[9],[1,[22,3,["availability"]],false],[10],[0,"\\n              "],[10],[0,"\\n"]],"parameters":[]},null],[4,"if",[[23,["isOpen"]]],null,{"statements":[[4,"if",[[22,3,["champions"]]],null,{"statements":[[0,"                "],[7,"div"],[11,"class","Feature-Champions"],[9],[0,"\\n                  "],[7,"h3"],[9],[0,"Core Team Champions"],[10],[0,"\\n                  "],[7,"ul"],[9],[0,"\\n"],[4,"each",[[22,3,["champions"]]],null,{"statements":[[0,"                      "],[7,"li"],[11,"class","Feature-Champion"],[9],[0,"\\n                        "],[7,"a"],[12,"href",[28,[[22,2,["url"]]]]],[9],[0,"\\n                          "],[7,"img"],[12,"src",[28,[[22,2,["image"]]]]],[9],[10],[0,"\\n                          "],[7,"span"],[9],[1,[22,2,["name"]],false],[10],[0,"\\n                        "],[10],[0,"\\n                      "],[10],[0,"\\n"]],"parameters":[2]},null],[0,"                  "],[10],[0,"\\n                "],[10],[0,"\\n"]],"parameters":[]},null],[0,"\\n"],[4,"if",[[22,3,["resources"]]],null,{"statements":[[0,"                "],[7,"div"],[11,"class","Feature-Resources"],[9],[0,"\\n                  "],[7,"h3"],[9],[0,"Resources"],[10],[0,"\\n                  "],[7,"ul"],[9],[0,"\\n"],[4,"each",[[22,3,["resources"]]],null,{"statements":[[0,"                      "],[7,"li"],[9],[7,"span"],[12,"class",[28,["icon-",[22,1,["type"]]]]],[9],[10],[7,"a"],[12,"href",[28,[[22,1,["url"]]]]],[9],[1,[22,1,["name"]],false],[10],[10],[0,"\\n"]],"parameters":[1]},null],[0,"                  "],[10],[0,"\\n                "],[10],[0,"\\n"]],"parameters":[]},null]],"parameters":[]},null],[0,"          "],[10],[0,"\\n        "],[10],[0,"\\n      "],[10],[0,"\\n    "],[10],[0,"\\n"],[4,"if",[[23,["isOpen"]]],null,{"statements":[[0,"      "],[7,"a"],[11,"href",""],[12,"id",[28,[[22,3,["id"]]]]],[12,"aria-controls",[28,[[22,3,["descriptionId"]]]]],[11,"aria-expanded","false"],[3,"action",[[22,0,[]],"toggle"]],[9],[0,"\\n        Show less\\n      "],[10],[0,"\\n"]],"parameters":[]},null],[0,"  "],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"roadmap-page/components/feature-list/new-feature-item/template.hbs"}})
e.default=t}),define("roadmap-page/components/feature-list/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"frgPIgRU",block:'{"symbols":["feature","@features"],"statements":[[7,"div"],[11,"class","Features"],[9],[0,"\\n"],[4,"each",[[22,2,[]]],null,{"statements":[[0,"    "],[1,[27,"feature-list/new-feature-item",null,[["feature"],[[22,1,[]]]]],false],[0,"\\n"]],"parameters":[1]},null],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"roadmap-page/components/feature-list/template.hbs"}})
e.default=t}),define("roadmap-page/components/main-footer",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Component.extend({tagName:"",init(){this._super(...arguments),this.currentYear=(new Date).getUTCFullYear()}})
e.default=t}),define("roadmap-page/components/mark-down/component",["exports","markdown-it","highlightjs"],function(e,t,a){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
const n=(0,t.default)({highlight(e,t){if(t&&a.default.getLanguage(t))try{return`<pre class="hljs"><code>${a.default.highlight(t,e,!0).value}</code></pre>`}catch(n){console.log("Error highlighting",t,n)}return""}})
var o=Ember.Component.extend({renderedText:Ember.computed("text",function(){return n.render(this.text)})})
e.default=o}),define("roadmap-page/components/mark-down/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"sQf+GR66",block:'{"symbols":[],"statements":[[7,"div"],[9],[0,"\\n  "],[1,[21,"renderedText"],true],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"roadmap-page/components/mark-down/template.hbs"}})
e.default=t}),define("roadmap-page/components/roadmap-page/-utils/code-splitting",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default=[{name:"Code Splitting",summary:"Split assets up along route boundaries automatically, so file sizes (and\nthus load times) grow with the size of the route, not the entire app.\n",description:'Code splitting is a technique where you package an app\'s JavaScript modules\ninto multiple "bundles" that can be loaded asynchronously at runtime.\n\nRather than having to download, parse and evaluate a single, concatenated\nfile that contains every dependency and all of the application code, you\ncan break it up into a smaller file that contains just a subset for the\ntask at hand. You can then fetch additional bundles either in the\nbackground when the user is idle, or in response to a user-initiated\naction.\n\nAn application\'s routes are the most common boundary used to decide where\nto split code. Because of Ember\'s strong conventions around both routing\nand file system layout, and early adoption of JavaScript (ES6) modules, we\nshould make it easy for developers to get route-based code splitting "for\nfree" with Ember CLI.\n\nIf a developer wants to code split more aggressively (i.e. _within_ a route\nin addition to between routes), at minimum that capability should be\navailable via an addon.\n\nThe advantage of code splitting is that load time is tied to the\ncomplexity of a particular task or page, not the complexity of the entire\napp. Currently, when adding code to an app, every user pays some cost for\nthat code even if they never visit the page that uses it.\n\nThe most popular code splitting tool in the ecosystem today is webpack,\nalthough Closure Compiler has had similar functionality for years.\nWhichever tool we use by default, we want to design the route-based code\nsplitting feature to be pluggable so it can be implemented with any tool.\nNot only does this give us portability in case a new tool gains\npopularity, it means that addon authors can experiment with new packaging\nand bundling strategies.\n\nThe [Strategies RFC](https://github.com/ember-cli/rfcs/pull/110) proposes an\nextension to Ember CLI to add a packaging hook to the build pipeline.\nThis hook would allow any addon to see the entire application in its final,\nassembled form but before concatenation or compilation of JavaScript modules\ninto AMD.\n\nIn keeping with our goal of ["unlocked\nexperimentation"](https://emberjs.com/blog/2017/04/05/emberconf-2017-state-of-the-union.html#toc_our-new-modus-operandi-unlocked-experimentation-in-place-upgrades),\nwe are starting with this extension point to allow the community to build\naddons that can easily integrate with code splitting tools like webpack.\n\nOnce the extension point exists and we can experiment with different\napproaches, the next step will be to evaluate when and how this might\nbecome part of the default out-of-the-box Ember experience.\n',status:"under-consideration",statusText:"RFC Submitted",availability:"Not yet available.",resources:[{type:"rfc",name:"Packaging Strategies RFC",url:"https://github.com/ember-cli/rfcs/pull/110"}],champions:[{name:"Robert Jackson",image:"https://avatars2.githubusercontent.com/u/12637?v=4&s=460",url:"https://github.com/rwjblue"},{name:"Tom Dale",image:"https://avatars0.githubusercontent.com/u/90888?v=4&s=460",url:"https://github.com/tomdale"}]}]}),define("roadmap-page/components/roadmap-page/-utils/engines",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default=[{name:"Engines",summary:"An advanced enterprise feature that allows an application to be broken up into multiple pieces that are loosely coupled,\nwith each having a separate container to avoid naming collisions between teams of developers.\n",description:"Engines is mostly production ready, and is used by major companies such as Chase and LinkedIn.\nHowever, they are still conidered experimental due to some build time concerns such as lazyLoading\nbeing controlled by the engine rather than the host and tests not being located in the engine.\nPart of the latter issue may be fixed with the release and incorporation of module unification.\nFor more information, see this great\n[Reader's Questions answer](https://discuss.emberjs.com/t/readers-questions-what-is-the-status-of-ember-engines/14236).\n",status:"in-development",statusText:"In Implementation",availability:"Available",resources:[{type:"rfc",name:"Engines RFC",url:"https://github.com/emberjs/rfcs/blob/master/text/0010-engines.md"},{type:"documentation",name:"Documentation",url:"https://ember-engines.com"}],champions:[{name:"No one",image:null,url:null}]}]}),define("roadmap-page/components/roadmap-page/-utils/es-classes",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default=[{name:"ES Classes",summary:"Use native class syntax interchangeably with the Ember Object model.\n",description:'Native ES classes are advancing quickly, with features like [class\nfields](https://github.com/tc39/proposal-class-fields),\nprivate [fields](https://github.com/tc39/proposal-class-fields#private-fields)\nand [methods](https://github.com/tc39/proposal-private-methods),\nand [decorators](https://github.com/tc39/proposal-decorators) just around the\ncorner. At the same time, more and more tooling is being developed for the\nsyntax, from developer tools and editors to documentation generators and\nmore. Ember has always been about shared solutions, and transitioning to the\nmodern native class syntax is no exception!\n\nAs it turns out, the existing object model is already highly cross-compatible\nwith the new class syntax. The [ES Class\nRFC](https://github.com/emberjs/rfcs/blob/master/text/0240-es-classes.md)\noutlined a path forward that required few changes to the existing object model,\nmostly around fixing broken features such as observers and event listeners,\nand allowing "zebra-striping" - being able to go back and forth between native\nclasses and EmberObject based classes using the old style.\n\nThe RFC also touched on decorators, but didn\'t specify any to be added to Ember\ndirectly yet. Instead, it encouraged continued exploration by addons such as\nthe long running [ember-decorators](https://github.com/ember-decorators)\nproject, which has been experimenting with decorators since they were first\nproposed and is continuing to evolve their syntax and usage. Over time addons\nlike these will be the basis for a set of decorators in Ember, similar to how\n[ember-native-dom-helpers paved the way for modern testing helpers](https://github.com/emberjs/rfcs/blob/master/text/0268-acceptance-testing-refactor.md#dom-interaction-helpers).\n\nA [quest\nissue](https://github.com/emberjs/ember.js/issues/16927) is actively used\nby the strike team `#st-native-classes` to keep track of all of the major tasks left.\n',status:"in-development",statusText:"In Implementation",availability:"Not yet available.",resources:[{type:"rfc",name:"ES Class RFC",url:"https://github.com/emberjs/rfcs/blob/master/text/0240-es-classes.md"},{type:"addons",name:"Native classes in Ember",url:"http://ember-decorators.github.io/ember-decorators/latest/docs"},{type:"quest",name:"Quest Issue",url:"https://github.com/emberjs/ember.js/issues/16927"},{type:"codemod",name:"Codemod",url:"https://github.com/scalvert/ember-es6-class-codemod/"}],champions:[{name:"Robert Jackson",image:"https://avatars2.githubusercontent.com/u/12637?v=4&s=460",url:"https://github.com/wycats"},{name:"Yehuda Katz",image:"https://avatars0.githubusercontent.com/u/4?s=460&v=4",url:"https://github.com/rwjblue"}]}]}),define("roadmap-page/components/roadmap-page/-utils/features",["exports","roadmap-page/components/roadmap-page/-utils/code-splitting","roadmap-page/components/roadmap-page/-utils/engines","roadmap-page/components/roadmap-page/-utils/es-classes","roadmap-page/components/roadmap-page/-utils/glimmer-compat","roadmap-page/components/roadmap-page/-utils/js-modules-api","roadmap-page/components/roadmap-page/-utils/module-unification","roadmap-page/components/roadmap-page/-utils/named-blocks","roadmap-page/components/roadmap-page/-utils/qunit-simplification","roadmap-page/components/roadmap-page/-utils/router-service"],function(e,t,a,n,o,s,i,r,l,m){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var p=[t.default[0],a.default[0],n.default[0],o.default[0],s.default[0],i.default[0],r.default[0],l.default[0],m.default[0]]
e.default=p}),define("roadmap-page/components/roadmap-page/-utils/glimmer-compat",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default=[{name:"Ember/Glimmer.js Compatibility",summary:"Seamlessly use components written using the [Glimmer.js](https://www.glimmerjs.com)\ncomponent API in Ember apps.\n",description:"Glimmer.js introduces a new, modern take on writing UI components for the\nweb. Because they're powered by the same Glimmer VM that Ember uses, it\nwill be possible to mix and match them with your existing components in an\nEmber app.\n\nWe want to be upfront about the fact that the API in Glimmer.js is still\nundergoing rapid breaking changes, and isn't ready to be included by\ndefault in Ember. For those comfortable living on the bleeding edge,\nhowever, we'd like to begin this integration work either behind a feature\nflag or via an addon so we can start gathering feedback.\n\nThe first steps toward this integration are:\n\n1. Iterate and merge the [Custom Components RFC](https://github.com/emberjs/rfcs/blob/master/text/0213-custom-components.md),\n   which describes a public API for registering custom Glimmer component managers.\n2. Update the Ember.js build pipeline to support TypeScript. Glimmer itself is exhaustively\n   typed, but today Ember's rendering code (on top of Glimmer VM) is untyped JavaScript, which\n   has caused unnecessary bugs and lost time.\n3. Update Ember.js to use the latest Glimmer VM version (0.29.0 at the time of this writing).\n\nThere is some additional design work that is still needed as well. For example, Ember needs to\nknow which component manager to use for a given template (i.e., is this a Glimmer component\ntemplate or an Ember component template?). We need to design an API that will allow users to\nindicate which is which in projects that use multiple component styles.\n",status:"in-development",statusText:"In Implementation",availability:"Not yet available.",resources:[{type:"rfc",name:"Custom Components RFC",url:"https://github.com/emberjs/rfcs/blob/master/text/0213-custom-components.md"},{type:"quest",name:"Quest Issue",url:"https://github.com/emberjs/ember.js/issues/16301"},{type:"discord",name:"#st-glimmer-components",url:"https://discordapp.com/channels/480462759797063690/484527412160364574"}],champions:[{name:"Kris Selden",image:"https://avatars2.githubusercontent.com/u/61024?v=4&s=460",url:"https://github.com/krisselden/"},{name:"Robert Jackson",image:"https://avatars2.githubusercontent.com/u/12637?v=4&s=460",url:"https://github.com/rwjblue"},{name:"Tom Dale",image:"https://avatars0.githubusercontent.com/u/90888?v=4&s=460",url:"https://github.com/tomdale"}]}]}),define("roadmap-page/components/roadmap-page/-utils/js-modules-api",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default=[{name:"JavaScript Modules API",summary:"Allows developers to import just the parts of Ember they want via a JavaScript\n(ES6) modules API.\n",description:"While Ember.js apps use JavaScript modules, the framework itself is still\naccessed via the single global `Ember` or the single package `ember`.\n\n```ts\nimport Ember from 'ember';\nexport default Ember.Component.extend({\n  // ...\n});\n```\n\n[RFC 176](https://github.com/emberjs/rfcs/blob/master/text/0176-javascript-module-api.md)\ndescribes a module API for Ember that allows developers to import specific modules rather\nthan the whole framework. Decomposing the framework into small modules like this will\nboth make Ember more accessible to new users, as well as allow Ember CLI to build smaller\nassets by only including the parts of the framework that actually get used.\n\n```typescript\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  // ...\n});\n```\n\nYou can find the most up-to-date and complete mappings between the\nprevious API and the new modules API at the\n[ember-rfc176-data](https://github.com/ember-cli/ember-rfc176-data)\nrepository. We also provide an\n[ember-modules-codemod](https://github.com/tomdale/ember-modules-codemod)\nso that you can easily migrate your project.\n",status:"shipped",statusText:"Shipped",availability:"Ember CLI Babel v6.6.0+",resources:[{type:"rfc",name:"RFC 176",url:"https://github.com/emberjs/rfcs/blob/master/text/0176-javascript-module-api.md"},{type:"repo",name:"Ember RFC 176 Data",url:"https://github.com/ember-cli/ember-rfc176-data"},{type:"repo",name:"Ember Modules Codemod",url:"https://github.com/tomdale/ember-modules-codemod"}],champions:[{name:"Tom Dale",image:"https://avatars0.githubusercontent.com/u/90888?v=4&s=460",url:"https://github.com/tomdale"},{name:"Ricardo Mendes",image:"https://avatars2.githubusercontent.com/u/32344?v=4&s=460",url:"https://github.com/locks"}]}]}),define("roadmap-page/components/roadmap-page/-utils/module-unification",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default=[{name:'Improved File Layout ("New Pods" or "Module Unification")',summary:"Groups related files in Ember apps to ease access to commonly used files. This also lays the groundwork\nfor long-term improvements to numerous areas in Ember.\n",description:'The "New Pods" project (or "Module Unification") describes a new way to lay out Ember applications and\naddons in the `src/` directory (switching away from the `app/` folder).\n\nThis new approach will replace both the traditional "classic" filesystem layout and also\n"pods". Pods were an initial experiment from the very early days of Ember-CLI (when it too was an experiment)\nPods have been a huge success, but the initial experiment had some issues under-the-hood\nthat we\'re now able to improve upon based on what we\'ve learned as a community.\n\nThis new design allows us to put related parts of the framework together such as templates,\ncomponents, and component tests. It also makes it possible for components to reference relative\ncomponents and provides the ability for addons to declare new module types.\n\nAs part of the rework here, the rules for "resolving" files become much simpler,\nallowing for better app performance and compile-time optimizations. It also lays the ground work for\nautomated code-splitting work to occur (see further down the page).\n',status:"in-development",statusText:"In Implementation",availability:"Not yet available.",resources:[{type:"blogpost",name:"High-level overview",url:"https://madhatted.com/2017/7/12/embercamp-module-unification-update"},{type:"rfc",name:"Module Unification RFC",url:"https://github.com/emberjs/rfcs/pull/143"},{type:"quest",name:"Quest Issue",url:"https://github.com/emberjs/ember.js/issues/16373"},{type:"channel",name:"Discord: #st-module-unification",url:"https://discord.gg/zT3asNS"}],champions:[{name:"Matthew Beale",image:"https://avatars0.githubusercontent.com/u/8752?v=4&s=460",url:"https://github.com/mixonic"},{name:"Dan Gebhardt",image:"https://avatars3.githubusercontent.com/u/29122?v=4&s=460",url:"https://github.com/dgeb"}]}]}),define("roadmap-page/components/roadmap-page/-utils/named-blocks",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default=[{name:"Named Blocks",summary:"Introduce syntax for passing in multiple named template blocks into a component,\nand unify the rendering syntaxes / semantics for blocks/primitives/component-factories\npassed into a component.\n",description:"There are limitations to composition due to the inability to pass more than one block to a\ncomponent (or 2 blocks if you include the inverse block).\n\nThe result of this is that Ember developers have an ultra-powerful, compositional API\nfor overriding portions of a component, but they can only use it in one place in the\ncomponent invocation; any remaining overrides/configuration needs to be expressed as data\nand passed in as attributes to the component when it'd be vastly preferable to just pass\nin a chunk of DOM.\n\nExample:\n\n```hbs\n{{#x-modal headerText=page.title as |c|}}\n  <p>Modal Content {{foo}}</p>\n  <button onclick={{c.close}}>\n     Close modal\n  </button>\n{{/x-modal}}\n```\n\nNamed blocks empower developers to express the use case via:\n\n```hbs\n{{#x-modal}}\n  <@header as |c|>\n    {{page.title}}\n    {{status-indicator status=status}}\n    {{close-button action=c.close}}\n  </@header>\n\n  <@main as |c|>\n    <p>Modal Content {{foo}}</p>\n    <button onclick={{c.close}}>\n       Close modal\n    </button>\n  </@main>\n{{/x-modal}}\n```\n",status:"in-development",statusText:"In Implementation",availability:"Not yet available.",resources:[{type:"rfc",name:"Named Blocks RFC",url:"https://github.com/emberjs/rfcs/pull/226"}],champions:[{name:"Martin MuÃ±oz",image:"https://avatars0.githubusercontent.com/u/1151810?s=460&v=4",url:"https://github.com/mmun"},{name:"Alex Matchneer",image:"https://avatars0.githubusercontent.com/u/81818?s=460&v=4",url:"https://github.com/machty"}]}]}),define("roadmap-page/components/roadmap-page/-utils/qunit-simplification",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default=[{name:"Ember QUnit Simplification",summary:"Unify the concepts amongst the various types of test (acceptance, integration, and unit) and provide a single common structure to tests.\n",description:'The current structure of ember-qunit impedes ability to take advantage of some of new features being added to QUnit (Ember.js chosen default testing framework) becuaise of the tight coupling between ember-qunit and QUnit itself.\n\nOn the other hand developers are often confused by the "magic" `ember-qunit` is doing and the lines between QUnit and `ember-qunit` are vague.\n\nThe [Simplify QUnit testing API RFC](https://github.com/emberjs/rfcs/pull/232) proposes a new testing syntax, that will expose QUnit API directly while also making tests much easier to understand.\n\nRFC 232 also aims to remove a number of custom testing only APIs (largely because the container/registry system was completely private when the current tools were authored). Instead of things like this.subject, this.register, this.inject, or this.lookup we can rely on the standard way of performing these functions in Ember via the owner API.\n\nWhereas RFC 232 is concerned about Component / Helper integration and Service/Route/Controller/Component unit tests the [Acceptance Testing Refactor RFC](https://github.com/emberjs/rfcs/pull/268) aims to leverage what has been learned and apply that knowledge to acceptance testing.\n\nOnce RFCs 232 and 268 are shipped all test types in Ember will have a unified cohesive structure.\n',status:"shipped",statusText:"Shipped",availability:"Available in ember-qunit 4.1.0 and up",resources:[{type:"rfc",name:"Simplify QUnit testing API",url:"https://github.com/emberjs/rfcs/blob/master/text/0232-simplify-qunit-testing-api.md"},{type:"rfc",name:"Acceptance Testing Refactor",url:"https://github.com/emberjs/rfcs/blob/master/text/0268-acceptance-testing-refactor.md"},{type:"blogpost",name:"High-level overview",url:"http://rwjblue.com/2017/10/23/ember-qunit-simplication/"}],champions:[{name:"Robert Jackson",image:"https://avatars0.githubusercontent.com/u/12637?s=400&v=4",url:"https://github.com/rwjblue="}]}]}),define("roadmap-page/components/roadmap-page/-utils/router-service",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default=[{name:"Router Service",summary:"Provides low-level access to Ember's router, giving greater control to app\nand addon authors.\n",description:"Routing, or mapping URLs on to UI components, is at the heart of every\nEmber application. Historically, app developers have been constrained to\ndeclarative forms of controlling the router, limiting their ability to\nimplement new features easily or replace built-in framework APIs.\n\nThe router service is an Ember\n[`Service`](https://guides.emberjs.com/current/applications/services/) that\nthat can be injected into components or other services\nand used to imperatively query and modify the current state of the router.\n\nBy making these lower-level API public, app and addon authors have a\nsupported path for replacing Ember's built-in declarative routing APIs\nwith their own, should the need arise.\n\nFor example, previously it was impossible to fully recreate Ember's\n`{{link-to}}` component with public API. Developers who wanted to\nexperiment with creating an optimized version without the full set of\nfeatures were stuck.\n\nWith the router service, it's possible to write a custom component that\ntransitions the application's router to a new URL:\n\n```js\nimport Component from '@ember/component';\nimport { inject } from '@ember/service';\n\nexport default Component.extend({\n  router: inject(),\n  url: '/home',\n  click() {\n    let url = this.get('url');\n    this.get('router').transitionTo(url);\n  }\n})\n```\n\nThe [Router Service\nRFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md)\nhas been accepted and implementation has begun. In order to get it in your\nhands as soon as possible, we are taking a phased approach to\nimplementation.\n\n* Phase 1: Basic functionality like transitioning, querying the active\n  route, etc.\n* Phase 2: Advanced functionality that exposes and manipulates internal\n  data structures describing the current\n  routing state.\n\nPhase 1 was completed and shipped in Ember 2.15, with a [polyfill](https://github.com/rwjblue/ember-router-service-polyfill)\nfor older versions of Ember (back to 2.8).\n\nWe are currently looking for someone to lead the implementation of Phase\n2, which requires coordination and refactoring of the `RouteInfo` data structure\nacross [router.js](https://github.com/tildeio/router.js/) and Ember's current\n`outletState` and `handlerInfos` data structures.\n",status:"shipped",statusText:"Partially Shipped",availability:"Available in Ember 2.15 and up",resources:[{type:"rfc",name:"Router Service",url:"https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md"},{type:"pull-request",name:"Router Service MVP",url:"https://github.com/emberjs/ember.js/pull/14805"}],champions:[{name:"Robert Jackson",image:"https://avatars2.githubusercontent.com/u/12637?v=4&s=460",url:"https://github.com/rwjblue"},{name:"Edward Faulkner",image:"https://avatars0.githubusercontent.com/u/319282?v=4&s=460",url:"https://github.com/ef4"}]}]}),define("roadmap-page/components/roadmap-page/-utils/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
e.default=null}),define("roadmap-page/components/roadmap-page/component",["exports","roadmap-page/components/roadmap-page/-utils/features"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=Ember.Component.extend({features:t.default})
e.default=a}),define("roadmap-page/components/roadmap-page/statusboard-header/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"XmyMA7gj",block:'{"symbols":[],"statements":[[7,"img"],[11,"class","construction-tomster"],[11,"src","https://emberjs.com/images/tomsters/construction-dad5711c.png"],[11,"alt","Construction Tomster"],[9],[10],[0,"\\n\\n"],[7,"h1"],[9],[0,"Status Board"],[10],[0,"\\n\\n"],[7,"p"],[9],[0,"\\n  Ember is an open source SDK for building ambitious web application. This status board tracks our on-going initiatives to\\n  improve Ember and take advantage of cutting-edge browser features.\\n"],[10],[0,"\\n\\n"],[7,"p"],[9],[0,"\\n  And donâ€˜t miss the additional functionality available via Emberâ€˜s vibrant addon community at "],[7,"a"],[11,"href","http://emberobserver.com/"],[9],[0,"Ember Observer"],[10],[0,".\\n"],[10]],"hasEval":false}',meta:{moduleName:"roadmap-page/components/roadmap-page/statusboard-header/template.hbs"}})
e.default=t}),define("roadmap-page/components/roadmap-page/template",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"DjIuMwvg",block:'{"symbols":[],"statements":[[7,"span"],[9],[0,"\\n  "],[1,[21,"roadmap-page/statusboard-header"],false],[0,"\\n\\n  "],[1,[27,"feature-list",null,[["features"],[[23,["features"]]]]],false],[0,"\\n"],[10]],"hasEval":false}',meta:{moduleName:"roadmap-page/components/roadmap-page/template.hbs"}})
e.default=t}),define("roadmap-page/helpers/app-version",["exports","roadmap-page/config/environment","ember-cli-app-version/utils/regexp"],function(e,t,a){function n(e,n={}){const o=t.default.APP.version
let s=n.versionOnly||n.hideSha,i=n.shaOnly||n.hideVersion,r=null
return s&&(n.showExtended&&(r=o.match(a.versionExtendedRegExp)),r||(r=o.match(a.versionRegExp))),i&&(r=o.match(a.shaRegExp)),r?r[0]:o}Object.defineProperty(e,"__esModule",{value:!0}),e.appVersion=n,e.default=void 0
var o=Ember.Helper.helper(n)
e.default=o}),define("roadmap-page/helpers/svg-jar",["exports","ember-svg-jar/utils/make-helper","ember-svg-jar/utils/make-svg"],function(e,t,a){function n(e){try{return require(`ember-svg-jar/inlined/${e}`).default}catch(t){return null}}function o(e,t){return(0,a.default)(e,t,n)}Object.defineProperty(e,"__esModule",{value:!0}),e.svgJar=o,e.default=void 0
var s=(0,t.default)(o)
e.default=s}),define("roadmap-page/initializers/app-version",["exports","ember-cli-app-version/initializer-factory","roadmap-page/config/environment"],function(e,t,a){let n,o
Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,a.default.APP&&(n=a.default.APP.name,o=a.default.APP.version)
var s={name:"App Version",initialize:(0,t.default)(n,o)}
e.default=s}),define("roadmap-page/initializers/container-debug-adapter",["exports","ember-resolver/resolvers/classic/container-debug-adapter"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a={name:"container-debug-adapter",initialize(){let e=arguments[1]||arguments[0]
e.register("container-debug-adapter:main",t.default),e.inject("container-debug-adapter:main","namespace","application:main")}}
e.default=a}),define("roadmap-page/initializers/export-application-global",["exports","roadmap-page/config/environment"],function(e,t){function a(){var e=arguments[1]||arguments[0]
if(!1!==t.default.exportApplicationGlobal){var a
if("undefined"!=typeof window)a=window
else if("undefined"!=typeof global)a=global
else{if("undefined"==typeof self)return
a=self}var n,o=t.default.exportApplicationGlobal
n="string"==typeof o?o:Ember.String.classify(t.default.modulePrefix),a[n]||(a[n]=e,e.reopen({willDestroy:function(){this._super.apply(this,arguments),delete a[n]}}))}}Object.defineProperty(e,"__esModule",{value:!0}),e.initialize=a,e.default=void 0
var n={name:"export-application-global",initialize:a}
e.default=n}),define("roadmap-page/resolver",["exports","ember-resolver"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=t.default
e.default=a}),define("roadmap-page/router",["exports","roadmap-page/config/environment"],function(e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
const a=Ember.Router.extend({location:t.default.locationType,rootURL:t.default.rootURL})
a.map(function(){})
var n=a
e.default=n}),define("roadmap-page/templates/application",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"KLbjJA77",block:'{"symbols":[],"statements":[[7,"main-navbar"],[9],[10],[0,"\\n\\n"],[7,"div"],[11,"id","content-wrapper"],[9],[0,"\\n  "],[7,"div"],[11,"id","content"],[9],[0,"\\n    "],[1,[21,"roadmap-page"],false],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[1,[21,"main-footer"],false]],"hasEval":false}',meta:{moduleName:"roadmap-page/templates/application.hbs"}})
e.default=t}),define("roadmap-page/templates/components/main-footer",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.HTMLBars.template({id:"oLiSCfUG",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","footer responsive"],[9],[0,"\\n  "],[7,"div"],[11,"class","container"],[9],[0,"\\n    "],[7,"div"],[11,"class","footer-info"],[9],[0,"\\n      Copyright "],[1,[21,"currentYear"],false],[0,"\\n      "],[7,"a"],[11,"href","http://tilde.io"],[9],[0,"Tilde Inc."],[10],[0,"\\n      "],[7,"br"],[9],[10],[0,"\\n      "],[7,"a"],[11,"href","/team"],[9],[0,"Team"],[10],[0," |\\n      "],[7,"a"],[11,"href","/sponsors"],[9],[0,"Sponsors"],[10],[0,"\\n      "],[7,"br"],[9],[10],[0,"\\n      "],[7,"a"],[11,"href","/security"],[9],[0,"Security"],[10],[0," |\\n      "],[7,"a"],[11,"href","/legal"],[9],[0,"Legal"],[10],[0," |\\n      "],[7,"a"],[11,"href","/logos"],[9],[0,"Logos"],[10],[0,"\\n      "],[7,"br"],[9],[10],[0,"\\n      "],[7,"a"],[11,"href","/guidelines"],[9],[0,"Community Guidelines"],[10],[0,"\\n    "],[10],[0,"\\n\\n    "],[7,"div"],[11,"class","footer-statement"],[9],[0,"\\n      "],[7,"p"],[11,"class","footer-tagline"],[9],[0,"Ember.js is free, open source and always will be."],[10],[0,"\\n\\n      "],[7,"div"],[11,"class","footer-social"],[9],[0,"\\n        "],[7,"a"],[11,"href","http://twitter.com/emberjs"],[11,"title","Twitter"],[9],[0,"\\n          "],[1,[27,"svg-jar",["twitter-logo"],null],false],[0,"\\n        "],[10],[0,"\\n        "],[7,"a"],[11,"href","https://github.com/emberjs/ember.js"],[11,"title","GitHub"],[9],[0,"\\n          "],[1,[27,"svg-jar",["github-logo"],null],false],[0,"\\n        "],[10],[0,"\\n        "],[7,"a"],[11,"href","https://plus.google.com/communities/106387049790387471205"],[11,"title","Google+"],[9],[0,"\\n          "],[1,[27,"svg-jar",["google-plus-logo"],null],false],[0,"\\n        "],[10],[0,"\\n      "],[10],[0,"\\n    "],[10],[0,"\\n\\n    "],[7,"div"],[11,"class","footer-contributions"],[9],[0,"\\n      "],[7,"div"],[11,"class","contributor"],[9],[0,"\\n        "],[7,"p"],[9],[0,"Hosted by:"],[10],[0,"\\n        "],[7,"a"],[11,"href","https://www.heroku.com/emberjs"],[9],[1,[27,"svg-jar",["heroku-logo"],[["class","alt"],["logo-heroku","heroku logo"]]],false],[10],[0,"\\n      "],[10],[0,"\\n      "],[7,"div"],[11,"class","contributor"],[9],[0,"\\n        "],[7,"p"],[9],[0,"CDN provided by:"],[10],[0,"\\n        "],[7,"a"],[11,"href","https://www.fastly.com"],[9],[1,[27,"svg-jar",["fastly-logo"],[["class","alt"],["logo-fastly","fastly logo"]]],false],[10],[0,"\\n      "],[10],[0,"\\n    "],[10],[0,"\\n\\n  "],[10],[0,"\\n"],[10]],"hasEval":false}',meta:{moduleName:"roadmap-page/templates/components/main-footer.hbs"}})
e.default=t})
define("roadmap-page/config/environment",[],function(){try{var e="roadmap-page/config/environment",t=document.querySelector('meta[name="'+e+'"]').getAttribute("content"),a={default:JSON.parse(unescape(t))}
return Object.defineProperty(a,"__esModule",{value:!0}),a}catch(n){throw new Error('Could not read config from meta tag with name "'+e+'".')}}),runningTests||require("roadmap-page/app").default.create({name:"roadmap-page",version:"0.0.0+6621b85b"})
